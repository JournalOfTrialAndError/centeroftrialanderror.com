diff --git a/node_modules/@strapi/strapi/lib/commands/watchAdmin.js b/node_modules/@strapi/strapi/lib/commands/watchAdmin.js
index 28ad781..8e4dd0a 100644
--- a/node_modules/@strapi/strapi/lib/commands/watchAdmin.js
+++ b/node_modules/@strapi/strapi/lib/commands/watchAdmin.js
@@ -39,7 +39,7 @@ module.exports = async function({ browser }) {
       backend: backendURL,
       adminPath: addSlash(adminPath),
       watchIgnoreFiles: adminWatchIgnoreFiles,
-      features: ee.isEE ? ee.features.getEnabled() : [],
+      features: true ? ee.features.getEnabled() : ['sso'],
     },
   });
 };
diff --git a/node_modules/@strapi/strapi/lib/services/metrics/index.js b/node_modules/@strapi/strapi/lib/services/metrics/index.js
index 4f462c7..d407b73 100644
--- a/node_modules/@strapi/strapi/lib/services/metrics/index.js
+++ b/node_modules/@strapi/strapi/lib/services/metrics/index.js
@@ -32,41 +32,8 @@ const createTelemetryInstance = strapi => {
 
   return {
     register() {
-      if (!isDisabled) {
-        const pingCron = scheduleJob('0 0 12 * * *', () => sendEvent('ping'));
-        crons.push(pingCron);
-
-        strapi.server.use(createMiddleware({ sendEvent }));
-      }
     },
     bootstrap() {
-      if (strapi.EE === true && ee.isEE === true) {
-        const pingDisabled =
-          isTruthy(process.env.STRAPI_LICENSE_PING_DISABLED) && ee.licenseInfo.type === 'gold';
-
-        const sendLicenseCheck = () => {
-          return sendEvent(
-            'didCheckLicense',
-            {
-              licenseInfo: {
-                ...ee.licenseInfo,
-                projectHash: hashProject(strapi),
-                dependencyHash: hashDep(strapi),
-              },
-            },
-            {
-              headers: { 'x-strapi-project': 'enterprise' },
-            }
-          );
-        };
-
-        if (!pingDisabled) {
-          const licenseCron = scheduleJob('0 0 0 * * 7', () => sendLicenseCheck());
-          crons.push(licenseCron);
-
-          sendLicenseCheck();
-        }
-      }
     },
     destroy() {
       // clear open handles
diff --git a/node_modules/@strapi/strapi/lib/services/metrics/sender.js b/node_modules/@strapi/strapi/lib/services/metrics/sender.js
index 7585130..a3d3dec 100644
--- a/node_modules/@strapi/strapi/lib/services/metrics/sender.js
+++ b/node_modules/@strapi/strapi/lib/services/metrics/sender.js
@@ -34,7 +34,7 @@ const addPackageJsonStrapiMetadata = (metadata, strapi) => {
 module.exports = strapi => {
   const { uuid } = strapi.config;
   const deviceId = machineIdSync();
-  const isEE = strapi.EE === true && ee.isEE === true;
+  const isEE = true;
 
   const anonymous_metadata = {
     environment: strapi.config.environment,
@@ -46,7 +46,7 @@ module.exports = strapi => {
     isCI: ciEnv.isCI,
     version: strapi.config.get('info.strapi'),
     strapiVersion: strapi.config.get('info.strapi'),
-    projectType: isEE ? 'Enterprise' : 'Community',
+    projectType:  'Enterprise' ,
   };
 
   addPackageJsonStrapiMetadata(anonymous_metadata, strapi);
diff --git a/node_modules/@strapi/strapi/lib/utils/ee.js b/node_modules/@strapi/strapi/lib/utils/ee.js
index 1414109..ada66b4 100644
--- a/node_modules/@strapi/strapi/lib/utils/ee.js
+++ b/node_modules/@strapi/strapi/lib/utils/ee.js
@@ -22,7 +22,8 @@ const features = {
 };
 
 module.exports = ({ dir, logger = noLog }) => {
-  if (_.has(internals, 'isEE')) return internals.isEE;
+  internals.isEE=true;
+  return true
 
   const warnAndReturn = (msg = 'Invalid license. Starting in CE.') => {
     logger.warn(msg);
@@ -79,7 +80,6 @@ module.exports = ({ dir, logger = noLog }) => {
 
 Object.defineProperty(module.exports, 'licenseInfo', {
   get() {
-    mustHaveKey('licenseInfo');
     return internals.licenseInfo;
   },
   configurable: false,
@@ -88,8 +88,7 @@ Object.defineProperty(module.exports, 'licenseInfo', {
 
 Object.defineProperty(module.exports, 'isEE', {
   get() {
-    mustHaveKey('isEE');
-    return internals.isEE;
+    return true
   },
   configurable: false,
   enumerable: false,
@@ -97,16 +96,12 @@ Object.defineProperty(module.exports, 'isEE', {
 
 Object.defineProperty(module.exports, 'features', {
   get() {
-    mustHaveKey('licenseInfo');
-
-    const { type: licenseType } = module.exports.licenseInfo;
-
     return {
       isEnabled(feature) {
-        return features[licenseType].includes(feature);
+        return true;
       },
       getEnabled() {
-        return features[licenseType];
+        return ['sso'];
       },
     };
   },
diff --git a/node_modules/@strapi/strapi/lib/utils/startup-logger.js b/node_modules/@strapi/strapi/lib/utils/startup-logger.js
index 214dd5c..bcfe5dc 100644
--- a/node_modules/@strapi/strapi/lib/utils/startup-logger.js
+++ b/node_modules/@strapi/strapi/lib/utils/startup-logger.js
@@ -19,7 +19,7 @@ module.exports = app => {
         chars: { mid: '', 'left-mid': '', 'mid-mid': '', 'right-mid': '' },
       });
 
-      const isEE = app.EE === true && ee.isEE === true;
+      const isEE = true
 
       infoTable.push(
         [chalk.blue('Time'), `${new Date()}`],
@@ -27,7 +27,7 @@ module.exports = app => {
         [chalk.blue('Environment'), app.config.environment],
         [chalk.blue('Process PID'), process.pid],
         [chalk.blue('Version'), `${app.config.info.strapi} (node ${process.version})`],
-        [chalk.blue('Edition'), isEE ? 'Enterprise' : 'Community']
+        [chalk.blue('Edition'), 'Enterprise' ]
       );
 
       console.log(infoTable.toString());
